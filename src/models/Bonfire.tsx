/* eslint-disable @typescript-eslint/naming-convention */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Livio Arango (https://sketchfab.com/livioag)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/bonfire-dark-souls-a090bdd8ca6841d1855f3d998697706b
Title: Bonfire / Dark Souls
*/

import { useEffect, useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import bonfireScene from "../assets/3d/bonfire.glb";

import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { Material, BufferGeometry, MeshStandardMaterial } from "three";

type GLTFResult = GLTF & {
  nodes: {
    [key: string]: THREE.Mesh & {
      geometry: BufferGeometry;
      material: Material;
    };
  };
  materials: {
    Mat_Ash: Material;
    Mat_Base: Material;
    Mat_Bones: Material;
    "Mat_Sword-Fire": MeshStandardMaterial;
  };
};

type BonfireProps = JSX.IntrinsicElements["group"];

const Bonfire = (props: BonfireProps) => {
  const { nodes, materials } = useGLTF(bonfireScene) as GLTFResult;

  const fireMaterial = useMemo(() => {
    if (!materials["Mat_Sword-Fire"]) return null;
    const mat = materials["Mat_Sword-Fire"].clone();
    mat.emissive = new THREE.Color("#ff8e26");
    mat.emissiveIntensity = 2;
    mat.needsUpdate = true; // Explicitly mark material for update
    return mat;
  }, [materials]); // Narrow dependency

  useEffect(() => {
    return () => {
      // Dispose of geometries and materials
      if (nodes.Object_10) {
        nodes.Object_10.traverse((child) => {
          if (child instanceof THREE.Mesh) {
            child.geometry?.dispose();
            if (Array.isArray(child.material)) {
              child.material.forEach(material => material?.dispose());
            } else {
              child.material?.dispose();
            }
          }
        });
      }
    };
  }, [nodes]);

  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2?.geometry}
          material={materials.Mat_Ash}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3?.geometry}
          material={materials.Mat_Ash}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4?.geometry}
          material={materials.Mat_Ash}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5?.geometry}
          material={materials.Mat_Ash}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6?.geometry}
          material={materials.Mat_Ash}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7?.geometry}
          material={materials.Mat_Base}
        />
        <lineSegments
          geometry={nodes.Object_8?.geometry}
          material={materials.Mat_Bones}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9?.geometry}
          material={materials.Mat_Bones}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10?.geometry}
          material={fireMaterial || materials["Mat_Sword-Fire"]}
        />
      </group>
    </group>
  );
};

export default Bonfire;

useGLTF.preload(bonfireScene);
