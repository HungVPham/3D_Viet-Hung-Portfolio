/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/naming-convention */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Pixel (https://sketchfab.com/stefan.lengyel1)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/medieval-fantasy-book-06d5a80a04fc4c5ab552759e9a97d91a
Title: Medieval Fantasy Book
*/

import React, { useCallback, useEffect, useRef, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { a } from '@react-spring/three';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';
import bookScene from '../assets/3d/book.glb';
import { useFrame, useThree } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: Record<string, THREE.Mesh>;
  materials: Record<string, THREE.Material>;
};

const Book = (props) => {
  const group = useRef<any>();
  const { nodes, materials, animations } = useGLTF(bookScene) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const { isRotating, setIsRotating, setCurrentStage } = props;
  const { gl, viewport } = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = useCallback((e: PointerEvent | TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }, [setIsRotating]);

  const handlePointerUp = useCallback((e: PointerEvent | TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }, [setIsRotating]);

  const handlePointerMove = useCallback((e: PointerEvent | TouchEvent) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      if (group.current) {
        group.current.rotation.y += delta * 0.01 * Math.PI;
      }

      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    };
  }, [isRotating, viewport.width]);

  const handleKeyDown = useCallback((e: KeyboardEvent) => {
    if(e.key === 'ArrowLeft') {
      if(!isRotating) setIsRotating(true);
      group.current.rotation.y += 0.01 * Math.PI;
    } else if(e.key === 'ArrowRight') {
      if(!isRotating) setIsRotating(true);
      group.current.rotation.y -= 0.01 * Math.PI;
    }
  }, [isRotating, setIsRotating]);

  const hangleKeyUp = useCallback((e: KeyboardEvent) => {
    if(e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
      setIsRotating(false);
    }
  }, [setIsRotating])

  useFrame(() => {
    if(!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if(Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0
      }

      group.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = group.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  })


  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', hangleKeyUp);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', hangleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove, handleKeyDown, hangleKeyUp]);
 
  useEffect(() => {

    Object.values(materials).forEach((material) => {
      if (material instanceof THREE.MeshStandardMaterial) {
        material.roughness = 0.5;
        material.metalness = 0.5;
        material.needsUpdate = true;
      }
    });

    if (actions['The Life']) {
      actions['The Life'].play();
    } 
  }, [actions, materials, isRotating]);

  return (
    <a.group ref={group} {...props}>
      <a.group name="Sketchfab_Scene">
        <a.group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <a.group name="dad255dd2cf24ae0bb357684e49722b4fbx" rotation={[Math.PI / 2, 0, 0]}>
            <a.group name="Object_2">
              <a.group name="RootNode">
                <a.group name="Scene" position={[-4.79372597, 0, 0.27796173]} rotation={[-Math.PI / 2, 0, 0]}>
                  <a.group name="Object_5" position={[-14.00022888, 15.78759384, 4.33730507]}>
                    <mesh
                      name="Scene_Texture-base_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Texture-base_0'].geometry}
                      material={materials['Texture-base']}
                    />
                    <mesh
                      name="Scene_Texture-base_0_1"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Texture-base_0_1'].geometry}
                      material={materials['Texture-base']}
                    />
                    <mesh
                      name="Scene_Texture-base-gloss-jpg_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Texture-base-gloss-jpg_0'].geometry}
                      material={materials['Texture-base-gloss-jpg']}
                    />
                    <mesh
                      name="Scene_Book-tittle_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Scene_Book-tittle_0'].geometry}
                      material={materials['Book-tittle']}
                    />
                  </a.group>
                  <a.group
                    name="Mill-wind-wheel"
                    position={[-35.78340912, -27.19170189, 3.88831043]}
                    rotation={[0.44533695, -0.44740808, -0.49810387]}
                    scale={[0.99999982, 1.00000024, 0.99999994]}>
                    <group
                      name="Object_11"
                      position={[-8.25311565, 39.88404083, -25.75028419]}
                      rotation={[-0.60692794, 0.13762521, 0.64419751]}>
                      <mesh
                        name="Mill-wind-wheel_Texture-base_0"
                        castShadow
                        receiveShadow
                        geometry={nodes['Mill-wind-wheel_Texture-base_0'].geometry}
                        material={materials['Texture-base']}
                      />
                    </group>
                  </a.group>
                  <a.group
                    name="Mill-water-wheel"
                    position={[3.70824051, -15.39521599, -0.44395638]}
                    rotation={[-1.9198622, 0, 0]}>
                    <a.group name="Object_14" position={[-17.70846939, 31.18280983, 4.78126144]}>
                      <mesh
                        name="Mill-water-wheel_Texture-base_0"
                        castShadow
                        receiveShadow
                        geometry={nodes['Mill-water-wheel_Texture-base_0'].geometry}
                        material={materials['Texture-base']}
                      />
                    </a.group>
                  </a.group>
                </a.group>
                <a.group
                  name="flag"
                  position={[-11.51328087, 12.49712181, -6.75236702]}
                  rotation={[-Math.PI / 2, 0, -Math.PI / 6]}>
                  <a.group name="Object_17" position={[-7.26199007, 9.03522682, -8.15981674]}>
                    <mesh
                      name="0"
                      castShadow
                      receiveShadow
                      geometry={nodes['0'].geometry}
                      material={materials['Texture-base']}
                      morphTargetDictionary={nodes['0'].morphTargetDictionary}
                      morphTargetInfluences={nodes['0'].morphTargetInfluences}
                    />
                  </a.group>
                </a.group>
                <a.group
                  name="flag-second"
                  position={[-11.49352741, 12.55176544, -26.24493599]}
                  rotation={[-Math.PI / 2, 0, 0]}>
                  <a.group name="Object_20" position={[-7.26199007, 9.03522682, -8.15981674]}>
                    <mesh
                      name="1"
                      castShadow
                      receiveShadow
                      geometry={nodes['1'].geometry}
                      material={materials['Texture-base']}
                      morphTargetDictionary={nodes['1'].morphTargetDictionary}
                      morphTargetInfluences={nodes['1'].morphTargetInfluences}
                    />
                  </a.group>
                </a.group>
                <a.group
                  name="Waterfall"
                  position={[-4.794, 0, 0.351]}
                  rotation={[-Math.PI / 2, 0, 0]}>
                  <a.group name="Object_23" position={[-14, 15.788, 4.337]}>
                    <mesh
                      name="Waterfall_Texture-base-gloss-jpg_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['Waterfall_Texture-base-gloss-jpg_0'].geometry}
                      material={materials['Texture-base-gloss-jpg']}
                    />
                  </a.group>
                </a.group>
                <a.group
                  name="deers"
                  position={[-23.122, -0.049, 14.878]}
                  rotation={[-Math.PI / 2, 0, 0]}>
                  <a.group name="Object_26" position={[4.328, 30.387, 4.387]}>
                    <mesh
                      name="deers_Texture-base_0"
                      castShadow
                      receiveShadow
                      geometry={nodes['deers_Texture-base_0'].geometry}
                      material={materials['Texture-base']}
                    />
                  </a.group>
                </a.group>
              </a.group>
            </a.group>
          </a.group>
        </a.group>
      </a.group>
    </a.group>
  )
}

export default Book;

useGLTF.preload(bookScene);