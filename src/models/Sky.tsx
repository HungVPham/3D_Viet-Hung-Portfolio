/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/naming-convention */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Paul (https://sketchfab.com/paul_paul_paul)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/free-skybox-anime-sky-56a60c1d1e8b44eabff138374f996d8f
Title: FREE - SkyBox Anime Sky
*/

import React, { useEffect, useRef, useMemo } from 'react';
import { useGLTF } from '@react-three/drei';
import * as THREE from 'three';
import skyScene from '../assets/3d/sky.glb';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  scene: THREE.Group;
};

const Sky = ({ isDay, isRotating }) => {
  const sky = useGLTF(skyScene) as GLTFResult;
  const skyRef = useRef<any>();

  const skyColor = useMemo(() => {
    return isDay ? new THREE.Color(0x70a4d5) : new THREE.Color(0x4e5d6b);
  }, [isDay]);

  const emissiveColor = useMemo(() => {
    return isDay ? new THREE.Color(0xffffff) : new THREE.Color(0x3e4457);
  }, [isDay]);

  useEffect(() => {
    if (skyRef.current) {
      skyRef.current.traverse((child) => {
        if (child instanceof THREE.Mesh && child.material) {
          // Create a new material if it doesn't exist
          if (!child.material.color) {
            child.material = new THREE.MeshStandardMaterial();
          }
          
          // Safely update material properties
          child.material.color = skyColor;
          child.material.emissive = emissiveColor;
          child.material.needsUpdate = true;
        }
      });
    }
  }, [isDay, skyColor, emissiveColor]);

  // useFrame((_, delta) => {
  //   if(isRotating) {
  //     skyRef.current.rotation.y += 0.15 * delta;
  //   }
  // })

  return (
    <primitive 
      ref={skyRef}
      object={sky.scene} 
      scale={0.1} 
      position={[0, 0, 0]} 
      rotation={[0, 1.5, 0]} 
    />
  );
};

export default Sky;

// Preload the model
useGLTF.preload(skyScene);