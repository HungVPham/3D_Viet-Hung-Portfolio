/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/naming-convention */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: RedCoreTimber (https://sketchfab.com/RedCoreTimber)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/dragon-flying-cycle-ae0831702eac462a9969ff4f8bd57710
Title: Dragon Flying Cycle
*/

import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations  } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

import * as THREE from 'three';
import dragonScene from '../assets/3d/dragon.glb'
import { a } from '@react-spring/three';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
    nodes: Record<string, THREE.Mesh | THREE.SkinnedMesh>;
    materials: Record<string, THREE.Material>;
  };

const Dragon = (props) => {

    const group = useRef<any>()
    const { nodes, materials, animations } = useGLTF(dragonScene) as GLTFResult;
    const { actions } = useAnimations(animations, group);

    const clock = useRef(0); // A clock to keep track of the time

    useEffect(() => {
        
        if (actions['Take 001']) {
          actions['Take 001'].play();
        }
      }, [actions]);


      useFrame((_, delta) => {
        // Increment the clock based on delta time
        clock.current += delta;
    
        // Define motion parameters
        const radiusX = 4; // Horizontal radius (longer)
        const radiusZ = 1.2; // Depth radius (shorter)
        const speed = 0.5; // Speed of the dragon
        const baseYOffset = 0.4; // Base height above the island/book
        const zOffset = -0.75; // Distance away from camera
        
        // Wave parameters
        const waveAmplitude = 0.2; // Height of the wave
        const waveFrequency = 2; // How many waves complete in one oval
        
        // Calculate position on the oval with sine wave
        const x = radiusX * Math.sin(clock.current * speed);
        const z = radiusZ * Math.cos(clock.current * speed) + zOffset;
        // Add sine wave to y position
        const y = baseYOffset + waveAmplitude * Math.sin(clock.current * speed * waveFrequency);
    
        // Set the dragon's position
        group.current.position.set(x, y, z);
    
        // Calculate the tangent direction for the dragon including vertical movement
        const nextX = radiusX * Math.sin((clock.current + delta * speed) * speed);
        const nextZ = radiusZ * Math.cos((clock.current + delta * speed) * speed) + zOffset;
        const nextY = baseYOffset + waveAmplitude * Math.sin((clock.current + delta * speed) * speed * waveFrequency);
    
        // Calculate direction to the next position (including vertical movement)
        const direction = new THREE.Vector3(nextX - x, nextY - y, nextZ - z).normalize();
    
        // Calculate rotation angles
        const horizontalAngle = Math.atan2(direction.x, direction.z);
        const verticalAngle = Math.atan2(direction.y, Math.sqrt(direction.x * direction.x + direction.z * direction.z));
    
        // Apply rotations
        group.current.rotation.y = horizontalAngle;
        group.current.rotation.x = verticalAngle;
    });
      
    
    return (
    <a.group ref={group} {...props} dispose={null}>
      <a.group name="Sketchfab_Scene">
        <a.group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.033}>
          <a.group name="Dragonfbx" rotation={[Math.PI / 2, 0, 0]}>
            <a.group name="Object_2">
              <a.group name="RootNode">
                <a.group name="Object_4">
                  <primitive object={nodes._rootJoint} />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.Dragon1213_0lambert2}
                    skeleton={(nodes.Object_7 as THREE.SkinnedMesh).skeleton}
                    castShadow
                  />
                  <a.group name="Object_6" />
                  <a.group name="Dragon_Poly" />
                </a.group>
              </a.group>
            </a.group>
          </a.group>
        </a.group>
      </a.group>
    </a.group>
    )
}

export default Dragon;

useGLTF.preload(dragonScene);